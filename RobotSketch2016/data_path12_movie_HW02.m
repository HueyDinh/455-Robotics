function [q] = data_path12_movie_HW02(dh)
% HEADER                                                                       
% Drexel MEM455 - Introduction to Robotics
% Fall 2021
%--------------------------------------------------------------------------
% DESCRIPTION:
%       Generates joint angles that simultaneously moves each R joint from
%       Postion 1 to Position 2 Using Linear Interpolation in Task Space.
%
% INPUTS*: (read in as a file)
%       dh = structure containing robot and drawing data 
%
% OUTPUTS:
%       q  = array of joint angles, one row for each robot configuration (in this case, # row = #)
%--------------------------------------------------------------------------
% OTHER INFORMATION:
%       n_inc = number of snapshots generated by the movie script
%--------------------------------------------------------------------------
%
% BEGIN{GENERATE JOINT DISPLACEMENTS}******************************************
pos1 = [nan, 30, 45, 15, 0]*pi/180; % Vector defining joint angles in pose 1, same convention as dh.t (first element ignored, last element for gripper)
pos2 = [nan, 105, 45, -60, 0]*pi/180; % Vector defining joint angles in pose 2
dh.t = pos1; % Override dh.t with pos1
dh = RRR_FDA(dh); % Perform FDA with t set to pos1
eff_init = dh.Xe_FDA; % Store the effector's position at pos1
dh.t = pos2; % Override dh.t with pos1
dh = RRR_FDA(dh); % Perform FDA with t set to pos1
eff_fin = dh.Xe_FDA; % Store the effector's position at pos1
n_inc  = 11; % Number of rendering snapshots
dh.elbowplus = 1; % Add the attribute dh.elbowplus to the dh struct (not in the original data script)
eff_pos_arr = [linspace(eff_init(1),eff_fin(1),n_inc);
               linspace(eff_init(2),eff_fin(2),n_inc);
               linspace(eff_init(3),eff_fin(3),n_inc)]'; % Effector Position Array: Linear interpolate between the task-space position at pos1 and pos2
N = length(dh.t); % Extract the dimension of dh.t
q = zeros(n_inc,N); % Output initialized as placeholder array with defined dimensions, no data yet
for i = 1:n_inc % Loop from Row 1 to Row n_inc of eff_pos_arr (each row correspond to 1 snapshot)
    dh.Xe = eff_pos_arr(i,:); % Assign the current row to attribute dh.Xe
    dh = RRR_RDA(dh); % Perform RDA analysis (note that dh.Xe was set up above)
    q(i,:) = dh.t_RDA; % Extract the RDA output from dh.t_RDA and use it to fill q.
end
%END{GENERATE JOINT DISPLACEMENTS}---------------------------------------------
end

